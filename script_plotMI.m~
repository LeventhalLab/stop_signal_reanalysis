% script_plotMI

% script to plot the modulation index heat maps to look for phase-amplitude
% coupling

bitOrder = 'b';
colorLim = [1e-5, 1.5e-4];

chDB_directory    = '/Volumes/PublicLeventhal1/dan/stop-signal reanalysis/stop-signal data structures';
hilbert_directory = '/Volumes/PublicLeventhal1/dan/stop-signal reanalysis/Hilbert transformed LFP 1 Hz bins';
comod_directory   = '/Volumes/PublicLeventhal1/dan/stop-signal reanalysis/phase-amplitude comodugrams';
comod_plots_directory = '/Volumes/PublicLeventhal1/dan/stop-signal reanalysis/phase-amplitude comod plots';

[chDB_list, chDB_fnames] = get_chStructs_for_analysis;

% try making a separate page for each session
figProps.width  = 11 * 2.54;
figProps.height = 8.5 * 2.54;

figProps.m = 2; figProps.n = 2;   % number of rows and columns, respectively

sideMargins = 1; topbotMargins = 2.54;

figProps.colSpacing = ones(1, figProps.n) * 0.5;
figProps.rowSpacing = ones(1, figProps.m) * 0.5;

figProps.panelWidth = ones(1, figProps.n) * (figProps.width - ...
                                             2 * sideMargins - ...
                                             sum(figProps.colSpacing)) / figProps.n;
figProps.panelHeight = ones(1, figProps.m) * (figProps.height - ...
                                              2 * topbotMargins - ...
                                              sum(figProps.rowSpacing)) / figProps.m;

for i_chDB = 1 : length(chDB_list)
    
    % first, load the relevant channel DBs, if necessary
    if ~exist(chDB_list{i_chDB}, 'var')
        chDB_file = fullfile(chDB_directory, chDB_fnames{i_chDB});
        disp(['loading ' chDB_file]);
        load( chDB_file );
    end
    
    implantID = implantID_from_ratID(chDB_list{i_chDB}(1:3));
    
    subject_comoddir = fullfile(comod_directory, [implantID '_phase-amp_comods']);
    if ~exist(subject_comoddir, 'dir')
        disp([subject_comoddir ' not found.']);
        continue;
    end
    
    subject_comodPlotsDir = fullfile(comod_plots_directory, [implantID '_comodPlots']);
    if ~exist(subject_comodPlotsDir, 'dir')
        mkdir(subject_comodPlotsDir);
    end
    
    chDB_info = whos( [chDB_list{i_chDB}(1:3) 'Ch*'] );
    channels = eval( chDB_info.name );
    
    cp = initChanParams();
    cp.locationSubClass = {'EMG', 'EEGLAM', 'Ref'};
    channels = excludeChannels(cp, channels);
    
    sessionList = getSessionsfromChannelDB( channels );
    regionList  = getSubclassesfromChannelDB( channels );
    
    numSessions = length( sessionList );
    numRegions  = length( regionList );
    
    for iTest = 1 : length(channels)
        sample_comodName = [channels{1}.name '_phase_amp_comodugram.mat'];
        comod_sessionDir = fullfile(subject_comoddir, sessionList{1});
        sample_comodName = fullfile(comod_sessionDir, sample_comodName);
        if ~exist(sample_comodName, 'file'); continue; end
        load(sample_comodName);
        break;
    end
    MIsize = size(MI);
    mean_MIs = zeros(numSessions, numRegions, MIsize(1), MIsize(2));
    num_validMIs = zeros(numSessions, numRegions);
    % store how many tetrodes recorded valid LFPs (and hence have a valid MI matrix) for each region in each session
    
    for iSession = 1 : numSessions
        
        cp = initChanParams();
        cp.session = sessionList{iSession};
        
        session_chList = extractChannels( cp, channels );
        sessionChannels = channels(session_chList);
        
        % exclude EMG, reference channels
%         cp = initChanParams();
%         cp.locationSubClass = {'EMG', 'EEGLAM', 'Ref'};
%         sessionChannels = excludeChannels(cp, sessionChannels);
        
        numCh = length(sessionChannels);
        
        comod_sessionDir = fullfile(subject_comoddir, sessionList{iSession});
        if ~exist(comod_sessionDir, 'dir')
            disp([comod_sessionDir ' not found.']);
            continue
        end
        
        numPagesForSession = 0;
        pdfName = fullfile(subject_comodPlotsDir, [sessionList{iSession} '_phase_amp.pdf']);
%         if exist(pdfName, 'file'); continue; end
        % RESTORE THE ABOVE COMMENTED OUT LINE ONCE DEBUGGING IS COMPLETE
        
        % find how many different regions there are for this set of
        % channels
        
        for iCh = 1 : numCh
            
            if rem(iCh, figProps.n * figProps.m) == 1
                numPagesForSession = numPagesForSession + 1;
                [h_fig, h_axes] = createFigPanels2(figProps);
            end
            
            ch = sessionChannels{iCh};
            comod_name = [ch.name '_phase_amp_comodugram.mat'];
            comod_name = fullfile(comod_sessionDir, comod_name);
            
            if ~exist(comod_name, 'file')
                continue;
            end
            
            load(comod_name);
            
            regionIdx = find(strcmpi(ch.location.subclass, regionList));
            mean_MIs(iSession, regionIdx, :, :) = squeeze(mean_MIs(iSession, regionIdx, :, :)) + MI;
            num_validMIs(iSession, regionIdx)   = num_validMIs(iSession, regionIdx) + 1;
            
            rowIdx = ceil((iCh - (numPagesForSession-1) * figProps.m * figProps.n) / figProps.n);
            colIdx = (iCh - (numPagesForSession-1) * figProps.m * figProps.n) - ((rowIdx-1) * figProps.n);
            
            axes(h_axes(rowIdx, colIdx));
            
            imagesc(low_freqs, high_freqs, MI');
            set(gca,'ydir','normal');
%             set(gca,'clim',colorLim);
            title([ch.name ', ' ch.location.name]);
            
            if rowIdx < figProps.m
                set(gca,'xticklabel',{});
            end
            if colIdx > 1
                set(gca,'yticklabel',{});
            end
            
            if rem(iCh, figProps.n * figProps.m) == 0
                if numPagesForSession == 1
                    export_fig(pdfName, '-pdf', '-q101', '-painters');
                else
                    export_fig(pdfName, '-pdf', '-q101', '-painters', '-append');
                end
                close(h_fig);
            end
            
        end    % for iCh = 1 : numCh
        
        % average across all tetrodes for each region for a single session
        numPagesForRegions = 0;
        for iRegion = 1 : numRegions
            if num_validMIs(iSession, iRegion) > 0
                mean_MIs(iSession, iRegion, :, :) = mean_MIs(iSession, iRegion, :, :) / num_validMIs(iSession, iRegion);
            end
            if rem(iRegion, figProps.n * figProps.m) == 1
                numPagesForRegions = numPagesForRegions + 1;
                [h_fig, h_axes] = createFigPanels2(figProps);
            end
            
            rowIdx = ceil((iRegion - (numPagesForRegions-1) * figProps.m * figProps.n) / figProps.n);
            colIdx = (iRegion - (numPagesForRegions-1) * figProps.m * figProps.n) - ((rowIdx-1) * figProps.n);
            
            axes(h_axes(rowIdx, colIdx));
            
            imageMI = squeeze(mean_MIs(iSession, iRegion, :, :));
            imagesc(low_freqs, high_freqs, imageMI');
            set(gca,'ydir','normal');
%             set(gca,'clim',colorLim);
            title([sessionList{iSession} ', ' regionList{iRegion} ', n = ' num2str(num_validMIs(iSession, iRegion))]);
            
            if rowIdx < figProps.m
                set(gca,'xticklabel',{});
            end
            if colIdx > 1
                set(gca,'yticklabel',{});
            end
            
            if rem(iRegion, figProps.n * figProps.m) == 0
                export_fig(pdfName, '-pdf', '-q101', '-painters', '-append');
                close(h_fig);
            end
            
        end    % end for iRegion = 1 : numRegions
        
    end    % for iSession = 1 : numSessions
    
    % average across all regions for all sessions
    mean_regionMI = zeros(numRegions, size(MI,1), size(MI,2));
    numValidSessions = zeros(1, numRegions);
    for iRegion = 1 : numRegions
        for iSession = 1 : numSessions
            
            % mean_MIs now contains the mean modulation index matrix for
            % each region within each session
            if num_validMIs(iSession, iRegion) > 0
                numValidSessions(iRegion) = numValidSessions(iRegion) + 1;
                mean_regionMI(iRegion, :, :) = squeeze(mean_regionMI(iRegion, :, :)) + ...
                    squeeze(mean_MIs(iSession, iRegion, :, :));
            end
        end
        mean_regionMI(iRegion, :, :) = mean_regionMI(iRegion, :, :)
    end
    
end